package ru.korenskiy_alexey;

import static java.lang.System.out;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import javax.swing.JTextArea;

public class ConnectChat {
	private Socket clientSocket;	
	private ObjectOutputStream writerOnServer;			//исходящий поток
	private Message tmpMessage;							//временное хранение сообщений с сервера
	private List<Message> userDataCollection;			//коллекция данных о пользователях
	private LocalTime time;								//время отправления сообщения

	class ReadRunnable implements Runnable{
		private Socket clientSocket;
		private MenuClientGui menuClientGui;
		private ObjectInputStream readerFromServer;		//входящий поток
		private Message tmpMessage;
		
		ReadRunnable(Socket clientSocket, MenuClientGui menuClientGui){
			this.clientSocket = clientSocket;
			this.menuClientGui = menuClientGui;
			//создаем входящий поток объектов через сокет
			try {
				readerFromServer = new ObjectInputStream(clientSocket.getInputStream());
			} catch (IOException e) {
				out.println("IOException");
				e.printStackTrace();
			}
		}
		public void run(){
			//прослушивает сервер на поступление сообщений пока есть соединение
			while(clientSocket.isConnected())
				readAndPrintMessage(menuClientGui);
			try {
				writerOnServer.close();			//закрываем исходящий поток
				readerFromServer.close();		//закрываем входящий поток
				clientSocket.close();			//закрываем соединение
			} catch (IOException e) {
				out.println("IOException");
				e.printStackTrace();
			}
		}
		
		public void readAndPrintMessage(MenuClientGui menuClientGui){	
			//считывает данные с сервера и выводит на экран в поле чата и списке юзеров
			try {
				while((tmpMessage = (Message)readerFromServer.readObject()) != null){
		//запускает ряд проверок входящих сообщений и в соответствии с ними действует
					isUserDataCollectionIsEmpty(tmpMessage, menuClientGui);
				}
			} catch (ClassNotFoundException | IOException e) {
				out.println("ClassNotFoundException or IOException");
				e.printStackTrace();
			}
		}
	}
	
	public void runClient(MenuClientGui menuClientGui){		//соединяемся с сервером
		try {
			Integer portInteger = new Integer(menuClientGui.getPortFieldText());	//вспомогательная перменная для преобр-я
			int port = portInteger.intValue();		//порта из текстовой формы в числовую
			//создает сокет клиента
			clientSocket = new Socket(menuClientGui.getIpAdressFieldText(), port);
			//создаем исходящий поток объектов через сокет
			writerOnServer = new ObjectOutputStream(clientSocket.getOutputStream());	
			userDataCollection = new ArrayList<Message>();
			//создаем thread для прослушки вход. потока от сервера на наличие сообщений
			Thread readThread = new Thread(new ReadRunnable(clientSocket,menuClientGui));		
			readThread.start();
		} catch (UnknownHostException e) {
			out.println("UnknownHostException");
			e.printStackTrace();
		} catch (IOException e) {
			out.println("IOException");
			e.printStackTrace(); 
		}
	}
	
	public synchronized void sendUserData(MenuClientGui menuClientGui){		//отправляем на сервер данные пользователя при подключении
		try {
			writerOnServer.writeObject(menuClientGui.getUserData());
		} catch (IOException e) {
			out.print("IOException");
			e.printStackTrace();
		}
	}
			
	public void sendMessage(MenuClientGui menuClientGui){	//отправляем введенное юзером сообщение на сервер
		try {
			writerOnServer.writeObject(menuClientGui.getChatClientGui().getMessage());
		} catch (IOException e) {
			out.println("IOException");
			e.printStackTrace();
		}
	}
	public List<Message> getUserDataCollection(){	//геттер для коллекции инфы о юзерах
		return userDataCollection;
	}
	
	//ряд методов-проверок для приема/отправки сообщений с/на сервер(а)
	
	//проверяет пуста ли коллекция
	public void isUserDataCollectionIsEmpty(Message tmpMessage, MenuClientGui menuClientGui){
		if(tmpMessage.getUserDataCollectionIsEmpty()){
			//menuClientGui.getUserData().setConcatName(menuClientGui.getUserData().getNickName());
			sendUserData(menuClientGui);	//если пуста, то отправляем данные пользователя на сервер
		}
		else
			isUserDataCollection(tmpMessage, menuClientGui);	//если не пуста
	}
	
	//проверяет является ли поступающее сообщение коллекцией юзеров
	public void isUserDataCollection(Message tmpMessage, MenuClientGui menuClientGui){
		if(tmpMessage.getIsUserDataCollection() == true){	//если да, то
			isThatNameAlreadyTaken(tmpMessage, menuClientGui);	//проверка совпадения имен
			isThatUserDataColectionLast(tmpMessage, menuClientGui);	//проверка на последний элемент коллекции
		}
		else 
			thisIsNewbieUserData(tmpMessage, menuClientGui); //проверка на поступлениеданных "новчика"
	}
		
	//проверяет юзеров в коллекции на совпадение имен с "новичком"
	public void isThatNameAlreadyTaken(Message tmpMessage, MenuClientGui menuClientGui){
		if(!tmpMessage.getConcatName().equals(menuClientGui.getUserData().getConcatName())){
			userDataCollection.add(tmpMessage);
			menuClientGui.getChatClientGui().getCounterUsers().setText("Пользователей онлайн: "+getUserDataCollection().size());
			menuClientGui.getChatClientGui().getListModel().addElement(tmpMessage.getConcatName());
			//menuClientGui.getUserData().setConcatName(menuClientGui.getUserData().getNickName());
		}
		else {	//если ники совпадают, меняет ник "новичка"
			menuClientGui.getUserData().setCounterName(tmpMessage.getCounterName()+1);
			menuClientGui.getUserData().setConcatName(menuClientGui.getUserData().getNickName().concat(menuClientGui.getUserData().getCounterName().toString()));
			userDataCollection.add(tmpMessage);
			menuClientGui.getChatClientGui().getCounterUsers().setText("Пользователей онлайн: "+getUserDataCollection().size());
			menuClientGui.getChatClientGui().getListModel().addElement(tmpMessage.getConcatName());
		}
	}
	
	//проверяет является ли это сообщение последним в коллекции
	public void isThatUserDataColectionLast(Message tmpMessage, MenuClientGui menuClientGui){
		if(tmpMessage.getUserDataCollectionLast()){
			menuClientGui.getChatClientGui().getMainFrame().setTitle("Связь: соединение для ".concat(menuClientGui.getUserData().getConcatName()));
			sendUserData(menuClientGui);
			if(!menuClientGui.getUserData().getCounterName().equals(0)){	//если ник менялся
				//добавляем в область чата сообщение, о том, что ник занят
				time = LocalTime.now();
				menuClientGui.getChatClientGui().getChatField().append(time.format(DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM)).concat("  Ваш никнейм уже занят другим пользователем и будет изменен\n"));
				menuClientGui.getChatClientGui().getChatField().setCaretPosition(menuClientGui.getChatClientGui().getChatField().getDocument().getLength());
			}
		}
	}
	
	//проверяет является ли входящее сообщение данными новчика
	public void thisIsNewbieUserData(Message tmpMessage, MenuClientGui menuClientGui){
		//если это пользоват-е данные "новичка"
		if((tmpMessage.getIsUserData() == true) && (tmpMessage.getIsUserDataCollection() == false)){
			userDataCollection.add(tmpMessage);
			menuClientGui.getChatClientGui().getCounterUsers().setText("Пользователей онлайн: "+getUserDataCollection().size());
			menuClientGui.getChatClientGui().getListModel().addElement(tmpMessage.getConcatName());
		try {
			Thread.sleep(1);
		} catch (InterruptedException e) {
			out.println("InterruptedException");
			e.printStackTrace();
		}
		//добавляем в область чата сообщение о новом юзере 
		time = LocalTime.now();
		menuClientGui.getChatClientGui().getChatField().append(time.format(DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM)).concat("  ").concat(tmpMessage.getNotice()).concat(tmpMessage.getConcatName()).concat("\n"));
		menuClientGui.getChatClientGui().getChatField().setCaretPosition(menuClientGui.getChatClientGui().getChatField().getDocument().getLength());
		}
		else {
			//добавляем в область чата новое сообщение
			time = LocalTime.now();
			menuClientGui.getChatClientGui().getChatField().append(time.format(DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM)).concat("  ").concat(tmpMessage.getConcatName()).concat(": ").concat(tmpMessage.getMessage()).concat("\n"));
			menuClientGui.getChatClientGui().getChatField().setCaretPosition(menuClientGui.getChatClientGui().getChatField().getDocument().getLength());
		}
	}
}
