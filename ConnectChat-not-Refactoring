package ru.korenskiy_alexey;

import static java.lang.System.out;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import javax.swing.JTextArea;

public class ConnectChat {
	private Socket clientSocket;	
	private ObjectOutputStream writerOnServer;			//исходящий поток
	private Message tmpMessage;							//временное хранение сообщений с сервера
	private List<Message> userDataCollection;			//коллекция данных о пользователях
	private List<String> userList;						//список пользователей для JList
	private LocalTime time;								//время отправления сообщения

	class ReadRunnable implements Runnable{
		private Socket clientSocket;
		private MenuClientGui menuClientGui;
		private ObjectInputStream readerFromServer;		//входящий поток
		private Message tmpMessage;
		
		ReadRunnable(Socket clientSocket, MenuClientGui menuClientGui){
			this.clientSocket = clientSocket;
			this.menuClientGui = menuClientGui;
			//создаем входящий поток объектов через сокет
			try {
				readerFromServer = new ObjectInputStream(clientSocket.getInputStream());
			} catch (IOException e) {
				out.println("IOException");
				e.printStackTrace();
			}
		}
		public void run(){
			//прослушивает сервер на поступление сообщений пока есть соединение
			while(clientSocket.isConnected() == true)
				readAndPrintMessage(menuClientGui);
		}
		
		public void readAndPrintMessage(MenuClientGui menuClientGui){	
			//считывает данные с сервера и выводит на экран в поле чата и списке юзеров
			try {
				while((tmpMessage = (Message)readerFromServer.readObject()) != null){	//если это коллекция юзеров
					if(tmpMessage.getIsUserDataCollection() == true){
							out.println("юзер кол-я до "+userDataCollection.size());
							userDataCollection.add(tmpMessage);
							out.println("юзер кол-я после "+userDataCollection.size());
							//userList.add(tmpMessage.getNickName());
							menuClientGui.getChatClientGui().getListModel().addElement(tmpMessage.getNickName());
					}
					else {
						//если это пользоват-е данные новичка
						if((tmpMessage.getIsUserData() == true) && (tmpMessage.getIsUserDataCollection() == false)){
							out.println("new юзер до "+userDataCollection.size());
							userDataCollection.add(tmpMessage);
							out.println("new юзер после "+userDataCollection.size());
							//userList.add(tmpMessage.getNickName());
							menuClientGui.getChatClientGui().getCounterUsers().setText("Пользователей онлайн: "+getUserDataCollection().size());
							menuClientGui.getChatClientGui().getListModel().addElement(tmpMessage.getNickName());
						try {
							Thread.sleep(100);
						} catch (InterruptedException e) {
							out.println("InterruptedException");
							e.printStackTrace();
						}
						//добавляем в область чата сообщение о новом юзере 
						time = LocalTime.now();
						menuClientGui.getChatClientGui().getChatField().append(time.format(DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM)).concat("  ").concat(tmpMessage.getNotice()).concat(tmpMessage.getNickName()).concat("\n"));
						}
						else {
							//добавляем в область чата новое сообщение
							time = LocalTime.now();
							menuClientGui.getChatClientGui().getChatField().append(time.format(DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM)).concat("  ").concat(tmpMessage.getNickName()).concat(": ").concat(tmpMessage.getMessage()).concat("\n"));
						}
					}
				}
			} catch (ClassNotFoundException | IOException e) {
				out.println("ClassNotFoundException or IOException");
				e.printStackTrace();
			}
		}
	}
	
	public void runClient(MenuClientGui menuClientGui){		//соединяемся с сервером
		try {
			Integer portInteger = new Integer(menuClientGui.getPortFieldText());	//вспомогательная перменная для преобр-я
			int port = portInteger.intValue();							//порта из текстовой формы в числовую
			//создает сокет клиента
			clientSocket = new Socket(menuClientGui.getIpAdressFieldText(), port);
			//создаем исходящий поток объектов через сокет
			writerOnServer = new ObjectOutputStream(clientSocket.getOutputStream());	
			userDataCollection = new ArrayList<Message>();
			userList = new ArrayList<String>();
			//создаем thread для прослушки вход. потока от сервера на наличие сообщений
			Thread readThread = new Thread(new ReadRunnable(clientSocket,menuClientGui));		
			readThread.start();
		} catch (UnknownHostException e) {
			out.println("UnknownHostException");
			e.printStackTrace();
		} catch (IOException e) {
			out.println("IOException");
			e.printStackTrace(); 
		}
	}
	
	public void sendUserData(MenuClientGui menuClientGui){		//отправляем на сервер данные пользователя при подключении
		try {
			writerOnServer.writeObject(menuClientGui.getUserData());
		} catch (IOException e) {
			out.print("IOException");
			e.printStackTrace();
		}
	}
			
	public void sendMessage(MenuClientGui menuClientGui){	//отправляем введенное юзером сообщение на сервер
		try {
			writerOnServer.writeObject(menuClientGui.getChatClientGui().getMessage());
		} catch (IOException e) {
			out.println("IOException");
			e.printStackTrace();
		}
	}
	public List<String> getUserList(){		//геттер для списка пользователей
		return userList;
	}
	public List<Message> getUserDataCollection(){	//геттер для коллекции инфы о юзерах
		return userDataCollection;
	}
}
